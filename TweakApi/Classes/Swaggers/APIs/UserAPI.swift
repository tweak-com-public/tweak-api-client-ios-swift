//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class UserAPI: APIBase {
    /**
     Confirm a user registration with email verification token.
     
     - parameter uid: (query)  
     - parameter token: (query)  
     - parameter redirect: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userConfirm(uid uid: String, token: String, redirect: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        userConfirmWithRequestBuilder(uid: uid, token: token, redirect: redirect).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Confirm a user registration with email verification token.
     - GET /Users/confirm
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter uid: (query)  
     - parameter token: (query)  
     - parameter redirect: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func userConfirmWithRequestBuilder(uid uid: String, token: String, redirect: String? = nil) -> RequestBuilder<Void> {
        let path = "/Users/confirm"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "uid": uid,
            "token": token,
            "redirect": redirect
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userCount(_where _where: String? = nil, completion: ((data: TWInlineResponse200?, error: ErrorType?) -> Void)) {
        userCountWithRequestBuilder(_where: _where).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Count instances of the model matched by where from the data source.
     - GET /Users/count
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "count" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<TWInlineResponse200> 
     */
    public class func userCountWithRequestBuilder(_where _where: String? = nil) -> RequestBuilder<TWInlineResponse200> {
        let path = "/Users/count"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "where": _where
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse200>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userCreate(data data: TWUser? = nil, completion: ((data: TWUser?, error: ErrorType?) -> Void)) {
        userCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a new instance of the model and persist it into the data source.
     - POST /Users
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWUser> 
     */
    public class func userCreateWithRequestBuilder(data data: TWUser? = nil) -> RequestBuilder<TWUser> {
        let path = "/Users"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWUser>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userCreateChangeStreamGetUsersChangeStream(options options: String? = nil, completion: ((data: NSURL?, error: ErrorType?) -> Void)) {
        userCreateChangeStreamGetUsersChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a change stream.
     - GET /Users/change-stream
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (query)  (optional)

     - returns: RequestBuilder<NSURL> 
     */
    public class func userCreateChangeStreamGetUsersChangeStreamWithRequestBuilder(options options: String? = nil) -> RequestBuilder<NSURL> {
        let path = "/Users/change-stream"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "options": options
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NSURL>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userCreateChangeStreamPostUsersChangeStream(options options: String? = nil, completion: ((data: NSURL?, error: ErrorType?) -> Void)) {
        userCreateChangeStreamPostUsersChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a change stream.
     - POST /Users/change-stream
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (form)  (optional)

     - returns: RequestBuilder<NSURL> 
     */
    public class func userCreateChangeStreamPostUsersChangeStreamWithRequestBuilder(options options: String? = nil) -> RequestBuilder<NSURL> {
        let path = "/Users/change-stream"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "options": options
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NSURL>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userDeleteById(id id: String, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        userDeleteByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete a model instance by {{id}} from the data source.
     - DELETE /Users/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func userDeleteByIdWithRequestBuilder(id id: String) -> RequestBuilder<AnyObject> {
        var path = "/Users/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userExistsGetUsersidExists(id id: String, completion: ((data: TWInlineResponse2002?, error: ErrorType?) -> Void)) {
        userExistsGetUsersidExistsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Check whether a model instance exists in the data source.
     - GET /Users/{id}/exists
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<TWInlineResponse2002> 
     */
    public class func userExistsGetUsersidExistsWithRequestBuilder(id id: String) -> RequestBuilder<TWInlineResponse2002> {
        var path = "/Users/{id}/exists"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse2002>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userExistsHeadUsersid(id id: String, completion: ((data: TWInlineResponse2002?, error: ErrorType?) -> Void)) {
        userExistsHeadUsersidWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Check whether a model instance exists in the data source.
     - HEAD /Users/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<TWInlineResponse2002> 
     */
    public class func userExistsHeadUsersidWithRequestBuilder(id id: String) -> RequestBuilder<TWInlineResponse2002> {
        var path = "/Users/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse2002>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userFind(filter filter: String? = nil, completion: ((data: [TWUser]?, error: ErrorType?) -> Void)) {
        userFindWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Find all instances of the model matched by filter from the data source.
     - GET /Users
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=[ {
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
} ]}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit (optional)

     - returns: RequestBuilder<[TWUser]> 
     */
    public class func userFindWithRequestBuilder(filter filter: String? = nil) -> RequestBuilder<[TWUser]> {
        let path = "/Users"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[TWUser]>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userFindById(id id: String, filter: String? = nil, completion: ((data: TWUser?, error: ErrorType?) -> Void)) {
        userFindByIdWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Find a model instance by {{id}} from the data source.
     - GET /Users/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include (optional)

     - returns: RequestBuilder<TWUser> 
     */
    public class func userFindByIdWithRequestBuilder(id id: String, filter: String? = nil) -> RequestBuilder<TWUser> {
        var path = "/Users/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWUser>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userFindOne(filter filter: String? = nil, completion: ((data: TWUser?, error: ErrorType?) -> Void)) {
        userFindOneWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Find first instance of the model matched by filter from the data source.
     - GET /Users/findOne
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit (optional)

     - returns: RequestBuilder<TWUser> 
     */
    public class func userFindOneWithRequestBuilder(filter filter: String? = nil) -> RequestBuilder<TWUser> {
        let path = "/Users/findOne"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWUser>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Login a user with username/email and password.
     
     - parameter credentials: (body)  
     - parameter include: (query) Related objects to include in the response. See the description of return value for more details. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userLogin(credentials credentials: AnyObject, include: String? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        userLoginWithRequestBuilder(credentials: credentials, include: include).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Login a user with username/email and password.
     - POST /Users/login
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter credentials: (body)  
     - parameter include: (query) Related objects to include in the response. See the description of return value for more details. (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func userLoginWithRequestBuilder(credentials credentials: AnyObject, include: String? = nil) -> RequestBuilder<AnyObject> {
        let path = "/Users/login"
        let URLString = TweakApiAPI.basePath + path
        let parameters = credentials.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Logout a user with access token.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userLogout(completion: ((error: ErrorType?) -> Void)) {
        userLogoutWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Logout a user with access token.
     - POST /Users/logout
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token

     - returns: RequestBuilder<Void> 
     */
    public class func userLogoutWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/Users/logout"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Counts accessTokens of User.
     
     - parameter id: (path) User id 
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userPrototypeCountAccessTokens(id id: String, _where: String? = nil, completion: ((data: TWInlineResponse200?, error: ErrorType?) -> Void)) {
        userPrototypeCountAccessTokensWithRequestBuilder(id: id, _where: _where).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Counts accessTokens of User.
     - GET /Users/{id}/accessTokens/count
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "count" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) User id 
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<TWInlineResponse200> 
     */
    public class func userPrototypeCountAccessTokensWithRequestBuilder(id id: String, _where: String? = nil) -> RequestBuilder<TWInlineResponse200> {
        var path = "/Users/{id}/accessTokens/count"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "where": _where
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse200>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Creates a new instance in accessTokens of this model.
     
     - parameter id: (path) User id 
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userPrototypeCreateAccessTokens(id id: String, data: TWAccessToken? = nil, completion: ((data: TWAccessToken?, error: ErrorType?) -> Void)) {
        userPrototypeCreateAccessTokensWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Creates a new instance in accessTokens of this model.
     - POST /Users/{id}/accessTokens
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "aeiou",
  "ttl" : 1.3579000000000001069366817318950779736042022705078125,
  "userId" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) User id 
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<TWAccessToken> 
     */
    public class func userPrototypeCreateAccessTokensWithRequestBuilder(id id: String, data: TWAccessToken? = nil) -> RequestBuilder<TWAccessToken> {
        var path = "/Users/{id}/accessTokens"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWAccessToken>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Deletes all accessTokens of this model.
     
     - parameter id: (path) User id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userPrototypeDeleteAccessTokens(id id: String, completion: ((error: ErrorType?) -> Void)) {
        userPrototypeDeleteAccessTokensWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Deletes all accessTokens of this model.
     - DELETE /Users/{id}/accessTokens
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter id: (path) User id 

     - returns: RequestBuilder<Void> 
     */
    public class func userPrototypeDeleteAccessTokensWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/Users/{id}/accessTokens"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a related item by id for accessTokens.
     
     - parameter id: (path) User id 
     - parameter fk: (path) Foreign key for accessTokens 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userPrototypeDestroyByIdAccessTokens(id id: String, fk: String, completion: ((error: ErrorType?) -> Void)) {
        userPrototypeDestroyByIdAccessTokensWithRequestBuilder(id: id, fk: fk).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a related item by id for accessTokens.
     - DELETE /Users/{id}/accessTokens/{fk}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter id: (path) User id 
     - parameter fk: (path) Foreign key for accessTokens 

     - returns: RequestBuilder<Void> 
     */
    public class func userPrototypeDestroyByIdAccessTokensWithRequestBuilder(id id: String, fk: String) -> RequestBuilder<Void> {
        var path = "/Users/{id}/accessTokens/{fk}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fk}", withString: "\(fk)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Find a related item by id for accessTokens.
     
     - parameter id: (path) User id 
     - parameter fk: (path) Foreign key for accessTokens 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userPrototypeFindByIdAccessTokens(id id: String, fk: String, completion: ((data: TWAccessToken?, error: ErrorType?) -> Void)) {
        userPrototypeFindByIdAccessTokensWithRequestBuilder(id: id, fk: fk).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Find a related item by id for accessTokens.
     - GET /Users/{id}/accessTokens/{fk}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "aeiou",
  "ttl" : 1.3579000000000001069366817318950779736042022705078125,
  "userId" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) User id 
     - parameter fk: (path) Foreign key for accessTokens 

     - returns: RequestBuilder<TWAccessToken> 
     */
    public class func userPrototypeFindByIdAccessTokensWithRequestBuilder(id id: String, fk: String) -> RequestBuilder<TWAccessToken> {
        var path = "/Users/{id}/accessTokens/{fk}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fk}", withString: "\(fk)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWAccessToken>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Queries accessTokens of User.
     
     - parameter id: (path) User id 
     - parameter filter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userPrototypeGetAccessTokens(id id: String, filter: String? = nil, completion: ((data: [TWAccessToken]?, error: ErrorType?) -> Void)) {
        userPrototypeGetAccessTokensWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Queries accessTokens of User.
     - GET /Users/{id}/accessTokens
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=[ {
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "aeiou",
  "ttl" : 1.3579000000000001069366817318950779736042022705078125,
  "userId" : 1.3579000000000001069366817318950779736042022705078125
} ]}]
     
     - parameter id: (path) User id 
     - parameter filter: (query)  (optional)

     - returns: RequestBuilder<[TWAccessToken]> 
     */
    public class func userPrototypeGetAccessTokensWithRequestBuilder(id id: String, filter: String? = nil) -> RequestBuilder<[TWAccessToken]> {
        var path = "/Users/{id}/accessTokens"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[TWAccessToken]>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) User id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userPrototypeUpdateAttributesPatchUsersid(id id: String, data: TWUser? = nil, completion: ((data: TWUser?, error: ErrorType?) -> Void)) {
        userPrototypeUpdateAttributesPatchUsersidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch attributes for a model instance and persist it into the data source.
     - PATCH /Users/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) User id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<TWUser> 
     */
    public class func userPrototypeUpdateAttributesPatchUsersidWithRequestBuilder(id id: String, data: TWUser? = nil) -> RequestBuilder<TWUser> {
        var path = "/Users/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWUser>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) User id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userPrototypeUpdateAttributesPutUsersid(id id: String, data: TWUser? = nil, completion: ((data: TWUser?, error: ErrorType?) -> Void)) {
        userPrototypeUpdateAttributesPutUsersidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch attributes for a model instance and persist it into the data source.
     - PUT /Users/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) User id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<TWUser> 
     */
    public class func userPrototypeUpdateAttributesPutUsersidWithRequestBuilder(id id: String, data: TWUser? = nil) -> RequestBuilder<TWUser> {
        var path = "/Users/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWUser>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a related item by id for accessTokens.
     
     - parameter id: (path) User id 
     - parameter fk: (path) Foreign key for accessTokens 
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userPrototypeUpdateByIdAccessTokens(id id: String, fk: String, data: TWAccessToken? = nil, completion: ((data: TWAccessToken?, error: ErrorType?) -> Void)) {
        userPrototypeUpdateByIdAccessTokensWithRequestBuilder(id: id, fk: fk, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a related item by id for accessTokens.
     - PUT /Users/{id}/accessTokens/{fk}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "aeiou",
  "ttl" : 1.3579000000000001069366817318950779736042022705078125,
  "userId" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) User id 
     - parameter fk: (path) Foreign key for accessTokens 
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<TWAccessToken> 
     */
    public class func userPrototypeUpdateByIdAccessTokensWithRequestBuilder(id id: String, fk: String, data: TWAccessToken? = nil) -> RequestBuilder<TWAccessToken> {
        var path = "/Users/{id}/accessTokens/{fk}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fk}", withString: "\(fk)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWAccessToken>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userReplaceById(id id: String, data: TWUser? = nil, completion: ((data: TWUser?, error: ErrorType?) -> Void)) {
        userReplaceByIdWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Replace attributes for a model instance and persist it into the data source.
     - POST /Users/{id}/replace
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWUser> 
     */
    public class func userReplaceByIdWithRequestBuilder(id id: String, data: TWUser? = nil) -> RequestBuilder<TWUser> {
        var path = "/Users/{id}/replace"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWUser>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userReplaceOrCreate(data data: TWUser? = nil, completion: ((data: TWUser?, error: ErrorType?) -> Void)) {
        userReplaceOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Replace an existing model instance or insert a new one into the data source.
     - POST /Users/replaceOrCreate
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWUser> 
     */
    public class func userReplaceOrCreateWithRequestBuilder(data data: TWUser? = nil) -> RequestBuilder<TWUser> {
        let path = "/Users/replaceOrCreate"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWUser>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Reset password for a user with email.
     
     - parameter options: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userResetPassword(options options: AnyObject, completion: ((error: ErrorType?) -> Void)) {
        userResetPasswordWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Reset password for a user with email.
     - POST /Users/reset
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter options: (body)  

     - returns: RequestBuilder<Void> 
     */
    public class func userResetPasswordWithRequestBuilder(options options: AnyObject) -> RequestBuilder<Void> {
        let path = "/Users/reset"
        let URLString = TweakApiAPI.basePath + path
        let parameters = options.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userUpdateAll(_where _where: String? = nil, data: TWUser? = nil, completion: ((data: TWInlineResponse2001?, error: ErrorType?) -> Void)) {
        userUpdateAllWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update instances of the model matched by {{where}} from the data source.
     - POST /Users/update
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "count" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<TWInlineResponse2001> 
     */
    public class func userUpdateAllWithRequestBuilder(_where _where: String? = nil, data: TWUser? = nil) -> RequestBuilder<TWInlineResponse2001> {
        let path = "/Users/update"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse2001>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userUpsertPatchUsers(data data: TWUser? = nil, completion: ((data: TWUser?, error: ErrorType?) -> Void)) {
        userUpsertPatchUsersWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch an existing model instance or insert a new one into the data source.
     - PATCH /Users
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWUser> 
     */
    public class func userUpsertPatchUsersWithRequestBuilder(data data: TWUser? = nil) -> RequestBuilder<TWUser> {
        let path = "/Users"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWUser>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userUpsertPutUsers(data data: TWUser? = nil, completion: ((data: TWUser?, error: ErrorType?) -> Void)) {
        userUpsertPutUsersWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch an existing model instance or insert a new one into the data source.
     - PUT /Users
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWUser> 
     */
    public class func userUpsertPutUsersWithRequestBuilder(data data: TWUser? = nil) -> RequestBuilder<TWUser> {
        let path = "/Users"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWUser>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userUpsertWithWhere(_where _where: String? = nil, data: TWUser? = nil, completion: ((data: TWUser?, error: ErrorType?) -> Void)) {
        userUpsertWithWhereWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     - POST /Users/upsertWithWhere
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<TWUser> 
     */
    public class func userUpsertWithWhereWithRequestBuilder(_where _where: String? = nil, data: TWUser? = nil) -> RequestBuilder<TWUser> {
        let path = "/Users/upsertWithWhere"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWUser>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
