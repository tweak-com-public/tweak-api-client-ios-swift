//
// TagAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class TagAPI: APIBase {
    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagCount(_where _where: String? = nil, completion: ((data: TWInlineResponse200?, error: ErrorType?) -> Void)) {
        tagCountWithRequestBuilder(_where: _where).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Count instances of the model matched by where from the data source.
     - GET /Tags/count
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "count" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<TWInlineResponse200> 
     */
    public class func tagCountWithRequestBuilder(_where _where: String? = nil) -> RequestBuilder<TWInlineResponse200> {
        let path = "/Tags/count"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "where": _where
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse200>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagCreate(data data: TWTag? = nil, completion: ((data: TWTag?, error: ErrorType?) -> Void)) {
        tagCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a new instance of the model and persist it into the data source.
     - POST /Tags
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "designId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWTag> 
     */
    public class func tagCreateWithRequestBuilder(data data: TWTag? = nil) -> RequestBuilder<TWTag> {
        let path = "/Tags"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWTag>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagCreateChangeStreamGetTagsChangeStream(options options: String? = nil, completion: ((data: NSURL?, error: ErrorType?) -> Void)) {
        tagCreateChangeStreamGetTagsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a change stream.
     - GET /Tags/change-stream
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (query)  (optional)

     - returns: RequestBuilder<NSURL> 
     */
    public class func tagCreateChangeStreamGetTagsChangeStreamWithRequestBuilder(options options: String? = nil) -> RequestBuilder<NSURL> {
        let path = "/Tags/change-stream"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "options": options
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NSURL>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagCreateChangeStreamPostTagsChangeStream(options options: String? = nil, completion: ((data: NSURL?, error: ErrorType?) -> Void)) {
        tagCreateChangeStreamPostTagsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a change stream.
     - POST /Tags/change-stream
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (form)  (optional)

     - returns: RequestBuilder<NSURL> 
     */
    public class func tagCreateChangeStreamPostTagsChangeStreamWithRequestBuilder(options options: String? = nil) -> RequestBuilder<NSURL> {
        let path = "/Tags/change-stream"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "options": options
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NSURL>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagDeleteById(id id: String, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        tagDeleteByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete a model instance by {{id}} from the data source.
     - DELETE /Tags/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func tagDeleteByIdWithRequestBuilder(id id: String) -> RequestBuilder<AnyObject> {
        var path = "/Tags/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagExistsGetTagsidExists(id id: String, completion: ((data: TWInlineResponse2002?, error: ErrorType?) -> Void)) {
        tagExistsGetTagsidExistsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Check whether a model instance exists in the data source.
     - GET /Tags/{id}/exists
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<TWInlineResponse2002> 
     */
    public class func tagExistsGetTagsidExistsWithRequestBuilder(id id: String) -> RequestBuilder<TWInlineResponse2002> {
        var path = "/Tags/{id}/exists"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse2002>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagExistsHeadTagsid(id id: String, completion: ((data: TWInlineResponse2002?, error: ErrorType?) -> Void)) {
        tagExistsHeadTagsidWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Check whether a model instance exists in the data source.
     - HEAD /Tags/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<TWInlineResponse2002> 
     */
    public class func tagExistsHeadTagsidWithRequestBuilder(id id: String) -> RequestBuilder<TWInlineResponse2002> {
        var path = "/Tags/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse2002>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagFind(filter filter: String? = nil, completion: ((data: [TWTag]?, error: ErrorType?) -> Void)) {
        tagFindWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Find all instances of the model matched by filter from the data source.
     - GET /Tags
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=[ {
  "name" : "aeiou",
  "designId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125
} ]}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit (optional)

     - returns: RequestBuilder<[TWTag]> 
     */
    public class func tagFindWithRequestBuilder(filter filter: String? = nil) -> RequestBuilder<[TWTag]> {
        let path = "/Tags"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[TWTag]>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagFindById(id id: String, filter: String? = nil, completion: ((data: TWTag?, error: ErrorType?) -> Void)) {
        tagFindByIdWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Find a model instance by {{id}} from the data source.
     - GET /Tags/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "designId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include (optional)

     - returns: RequestBuilder<TWTag> 
     */
    public class func tagFindByIdWithRequestBuilder(id id: String, filter: String? = nil) -> RequestBuilder<TWTag> {
        var path = "/Tags/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWTag>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagFindOne(filter filter: String? = nil, completion: ((data: TWTag?, error: ErrorType?) -> Void)) {
        tagFindOneWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Find first instance of the model matched by filter from the data source.
     - GET /Tags/findOne
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "designId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit (optional)

     - returns: RequestBuilder<TWTag> 
     */
    public class func tagFindOneWithRequestBuilder(filter filter: String? = nil) -> RequestBuilder<TWTag> {
        let path = "/Tags/findOne"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWTag>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Tag id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagPrototypeUpdateAttributesPatchTagsid(id id: String, data: TWTag? = nil, completion: ((data: TWTag?, error: ErrorType?) -> Void)) {
        tagPrototypeUpdateAttributesPatchTagsidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch attributes for a model instance and persist it into the data source.
     - PATCH /Tags/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "designId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) Tag id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<TWTag> 
     */
    public class func tagPrototypeUpdateAttributesPatchTagsidWithRequestBuilder(id id: String, data: TWTag? = nil) -> RequestBuilder<TWTag> {
        var path = "/Tags/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWTag>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Tag id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagPrototypeUpdateAttributesPutTagsid(id id: String, data: TWTag? = nil, completion: ((data: TWTag?, error: ErrorType?) -> Void)) {
        tagPrototypeUpdateAttributesPutTagsidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch attributes for a model instance and persist it into the data source.
     - PUT /Tags/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "designId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) Tag id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<TWTag> 
     */
    public class func tagPrototypeUpdateAttributesPutTagsidWithRequestBuilder(id id: String, data: TWTag? = nil) -> RequestBuilder<TWTag> {
        var path = "/Tags/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWTag>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagReplaceById(id id: String, data: TWTag? = nil, completion: ((data: TWTag?, error: ErrorType?) -> Void)) {
        tagReplaceByIdWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Replace attributes for a model instance and persist it into the data source.
     - POST /Tags/{id}/replace
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "designId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWTag> 
     */
    public class func tagReplaceByIdWithRequestBuilder(id id: String, data: TWTag? = nil) -> RequestBuilder<TWTag> {
        var path = "/Tags/{id}/replace"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWTag>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagReplaceOrCreate(data data: TWTag? = nil, completion: ((data: TWTag?, error: ErrorType?) -> Void)) {
        tagReplaceOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Replace an existing model instance or insert a new one into the data source.
     - POST /Tags/replaceOrCreate
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "designId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWTag> 
     */
    public class func tagReplaceOrCreateWithRequestBuilder(data data: TWTag? = nil) -> RequestBuilder<TWTag> {
        let path = "/Tags/replaceOrCreate"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWTag>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagUpdateAll(_where _where: String? = nil, data: TWTag? = nil, completion: ((data: TWInlineResponse2001?, error: ErrorType?) -> Void)) {
        tagUpdateAllWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update instances of the model matched by {{where}} from the data source.
     - POST /Tags/update
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "count" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<TWInlineResponse2001> 
     */
    public class func tagUpdateAllWithRequestBuilder(_where _where: String? = nil, data: TWTag? = nil) -> RequestBuilder<TWInlineResponse2001> {
        let path = "/Tags/update"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse2001>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagUpsertPatchTags(data data: TWTag? = nil, completion: ((data: TWTag?, error: ErrorType?) -> Void)) {
        tagUpsertPatchTagsWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch an existing model instance or insert a new one into the data source.
     - PATCH /Tags
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "designId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWTag> 
     */
    public class func tagUpsertPatchTagsWithRequestBuilder(data data: TWTag? = nil) -> RequestBuilder<TWTag> {
        let path = "/Tags"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWTag>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagUpsertPutTags(data data: TWTag? = nil, completion: ((data: TWTag?, error: ErrorType?) -> Void)) {
        tagUpsertPutTagsWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch an existing model instance or insert a new one into the data source.
     - PUT /Tags
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "designId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWTag> 
     */
    public class func tagUpsertPutTagsWithRequestBuilder(data data: TWTag? = nil) -> RequestBuilder<TWTag> {
        let path = "/Tags"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWTag>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func tagUpsertWithWhere(_where _where: String? = nil, data: TWTag? = nil, completion: ((data: TWTag?, error: ErrorType?) -> Void)) {
        tagUpsertWithWhereWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     - POST /Tags/upsertWithWhere
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "designId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<TWTag> 
     */
    public class func tagUpsertWithWhereWithRequestBuilder(_where _where: String? = nil, data: TWTag? = nil) -> RequestBuilder<TWTag> {
        let path = "/Tags/upsertWithWhere"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWTag>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
