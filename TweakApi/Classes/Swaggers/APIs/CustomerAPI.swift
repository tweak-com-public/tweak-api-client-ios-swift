//
// CustomerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CustomerAPI: APIBase {
    /**
     Confirm a user registration with email verification token.
     
     - parameter uid: (query)  
     - parameter token: (query)  
     - parameter redirect: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerConfirm(uid uid: String, token: String, redirect: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        customerConfirmWithRequestBuilder(uid: uid, token: token, redirect: redirect).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Confirm a user registration with email verification token.
     - GET /Customers/confirm
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter uid: (query)  
     - parameter token: (query)  
     - parameter redirect: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func customerConfirmWithRequestBuilder(uid uid: String, token: String, redirect: String? = nil) -> RequestBuilder<Void> {
        let path = "/Customers/confirm"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "uid": uid,
            "token": token,
            "redirect": redirect
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerCount(_where _where: String? = nil, completion: ((data: TWInlineResponse200?, error: ErrorType?) -> Void)) {
        customerCountWithRequestBuilder(_where: _where).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Count instances of the model matched by where from the data source.
     - GET /Customers/count
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "count" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<TWInlineResponse200> 
     */
    public class func customerCountWithRequestBuilder(_where _where: String? = nil) -> RequestBuilder<TWInlineResponse200> {
        let path = "/Customers/count"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "where": _where
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse200>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerCreate(data data: TWCustomer? = nil, completion: ((data: TWCustomer?, error: ErrorType?) -> Void)) {
        customerCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a new instance of the model and persist it into the data source.
     - POST /Customers
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "firstName" : "aeiou",
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "designs" : [ "{}" ],
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWCustomer> 
     */
    public class func customerCreateWithRequestBuilder(data data: TWCustomer? = nil) -> RequestBuilder<TWCustomer> {
        let path = "/Customers"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWCustomer>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerCreateChangeStreamGetCustomersChangeStream(options options: String? = nil, completion: ((data: NSURL?, error: ErrorType?) -> Void)) {
        customerCreateChangeStreamGetCustomersChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a change stream.
     - GET /Customers/change-stream
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (query)  (optional)

     - returns: RequestBuilder<NSURL> 
     */
    public class func customerCreateChangeStreamGetCustomersChangeStreamWithRequestBuilder(options options: String? = nil) -> RequestBuilder<NSURL> {
        let path = "/Customers/change-stream"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "options": options
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NSURL>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerCreateChangeStreamPostCustomersChangeStream(options options: String? = nil, completion: ((data: NSURL?, error: ErrorType?) -> Void)) {
        customerCreateChangeStreamPostCustomersChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a change stream.
     - POST /Customers/change-stream
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (form)  (optional)

     - returns: RequestBuilder<NSURL> 
     */
    public class func customerCreateChangeStreamPostCustomersChangeStreamWithRequestBuilder(options options: String? = nil) -> RequestBuilder<NSURL> {
        let path = "/Customers/change-stream"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "options": options
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NSURL>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerDeleteById(id id: String, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        customerDeleteByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete a model instance by {{id}} from the data source.
     - DELETE /Customers/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func customerDeleteByIdWithRequestBuilder(id id: String) -> RequestBuilder<AnyObject> {
        var path = "/Customers/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerExistsGetCustomersidExists(id id: String, completion: ((data: TWInlineResponse2002?, error: ErrorType?) -> Void)) {
        customerExistsGetCustomersidExistsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Check whether a model instance exists in the data source.
     - GET /Customers/{id}/exists
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<TWInlineResponse2002> 
     */
    public class func customerExistsGetCustomersidExistsWithRequestBuilder(id id: String) -> RequestBuilder<TWInlineResponse2002> {
        var path = "/Customers/{id}/exists"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse2002>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerExistsHeadCustomersid(id id: String, completion: ((data: TWInlineResponse2002?, error: ErrorType?) -> Void)) {
        customerExistsHeadCustomersidWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Check whether a model instance exists in the data source.
     - HEAD /Customers/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<TWInlineResponse2002> 
     */
    public class func customerExistsHeadCustomersidWithRequestBuilder(id id: String) -> RequestBuilder<TWInlineResponse2002> {
        var path = "/Customers/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse2002>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerFind(filter filter: String? = nil, completion: ((data: [TWCustomer]?, error: ErrorType?) -> Void)) {
        customerFindWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Find all instances of the model matched by filter from the data source.
     - GET /Customers
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=[ {
  "lastName" : "aeiou",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "firstName" : "aeiou",
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "designs" : [ "{}" ],
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
} ]}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit (optional)

     - returns: RequestBuilder<[TWCustomer]> 
     */
    public class func customerFindWithRequestBuilder(filter filter: String? = nil) -> RequestBuilder<[TWCustomer]> {
        let path = "/Customers"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[TWCustomer]>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerFindById(id id: String, filter: String? = nil, completion: ((data: TWCustomer?, error: ErrorType?) -> Void)) {
        customerFindByIdWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Find a model instance by {{id}} from the data source.
     - GET /Customers/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "firstName" : "aeiou",
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "designs" : [ "{}" ],
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include (optional)

     - returns: RequestBuilder<TWCustomer> 
     */
    public class func customerFindByIdWithRequestBuilder(id id: String, filter: String? = nil) -> RequestBuilder<TWCustomer> {
        var path = "/Customers/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWCustomer>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerFindOne(filter filter: String? = nil, completion: ((data: TWCustomer?, error: ErrorType?) -> Void)) {
        customerFindOneWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Find first instance of the model matched by filter from the data source.
     - GET /Customers/findOne
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "firstName" : "aeiou",
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "designs" : [ "{}" ],
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit (optional)

     - returns: RequestBuilder<TWCustomer> 
     */
    public class func customerFindOneWithRequestBuilder(filter filter: String? = nil) -> RequestBuilder<TWCustomer> {
        let path = "/Customers/findOne"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWCustomer>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Login a user with username/email and password.
     
     - parameter credentials: (body)  
     - parameter include: (query) Related objects to include in the response. See the description of return value for more details. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerLogin(credentials credentials: AnyObject, include: String? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        customerLoginWithRequestBuilder(credentials: credentials, include: include).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Login a user with username/email and password.
     - POST /Customers/login
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter credentials: (body)  
     - parameter include: (query) Related objects to include in the response. See the description of return value for more details. (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func customerLoginWithRequestBuilder(credentials credentials: AnyObject, include: String? = nil) -> RequestBuilder<AnyObject> {
        let path = "/Customers/login"
        let URLString = TweakApiAPI.basePath + path
        let parameters = credentials.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Logout a user with access token.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerLogout(completion: ((error: ErrorType?) -> Void)) {
        customerLogoutWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Logout a user with access token.
     - POST /Customers/logout
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token

     - returns: RequestBuilder<Void> 
     */
    public class func customerLogoutWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/Customers/logout"
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Counts accessTokens of Customer.
     
     - parameter id: (path) Customer id 
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeCountAccessTokens(id id: String, _where: String? = nil, completion: ((data: TWInlineResponse200?, error: ErrorType?) -> Void)) {
        customerPrototypeCountAccessTokensWithRequestBuilder(id: id, _where: _where).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Counts accessTokens of Customer.
     - GET /Customers/{id}/accessTokens/count
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "count" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) Customer id 
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<TWInlineResponse200> 
     */
    public class func customerPrototypeCountAccessTokensWithRequestBuilder(id id: String, _where: String? = nil) -> RequestBuilder<TWInlineResponse200> {
        var path = "/Customers/{id}/accessTokens/count"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "where": _where
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse200>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Counts designs of Customer.
     
     - parameter id: (path) Customer id 
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeCountDesigns(id id: String, _where: String? = nil, completion: ((data: TWInlineResponse200?, error: ErrorType?) -> Void)) {
        customerPrototypeCountDesignsWithRequestBuilder(id: id, _where: _where).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Counts designs of Customer.
     - GET /Customers/{id}/designs/count
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "count" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) Customer id 
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<TWInlineResponse200> 
     */
    public class func customerPrototypeCountDesignsWithRequestBuilder(id id: String, _where: String? = nil) -> RequestBuilder<TWInlineResponse200> {
        var path = "/Customers/{id}/designs/count"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "where": _where
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse200>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Creates a new instance in accessTokens of this model.
     
     - parameter id: (path) Customer id 
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeCreateAccessTokens(id id: String, data: TWAccessToken? = nil, completion: ((data: TWAccessToken?, error: ErrorType?) -> Void)) {
        customerPrototypeCreateAccessTokensWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Creates a new instance in accessTokens of this model.
     - POST /Customers/{id}/accessTokens
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "aeiou",
  "ttl" : 1.3579000000000001069366817318950779736042022705078125,
  "userId" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) Customer id 
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<TWAccessToken> 
     */
    public class func customerPrototypeCreateAccessTokensWithRequestBuilder(id id: String, data: TWAccessToken? = nil) -> RequestBuilder<TWAccessToken> {
        var path = "/Customers/{id}/accessTokens"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWAccessToken>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Creates a new instance in designs of this model.
     
     - parameter id: (path) Customer id 
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeCreateDesigns(id id: String, data: TWDesign? = nil, completion: ((data: TWDesign?, error: ErrorType?) -> Void)) {
        customerPrototypeCreateDesignsWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Creates a new instance in designs of this model.
     - POST /Customers/{id}/designs
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "image" : "aeiou",
  "thumbnail" : "aeiou",
  "name" : "aeiou",
  "customerId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "categories" : [ "{}" ],
  "object" : "{}",
  "tags" : [ "{}" ],
  "customer" : "{}"
}}]
     
     - parameter id: (path) Customer id 
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<TWDesign> 
     */
    public class func customerPrototypeCreateDesignsWithRequestBuilder(id id: String, data: TWDesign? = nil) -> RequestBuilder<TWDesign> {
        var path = "/Customers/{id}/designs"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWDesign>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Deletes all accessTokens of this model.
     
     - parameter id: (path) Customer id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeDeleteAccessTokens(id id: String, completion: ((error: ErrorType?) -> Void)) {
        customerPrototypeDeleteAccessTokensWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Deletes all accessTokens of this model.
     - DELETE /Customers/{id}/accessTokens
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter id: (path) Customer id 

     - returns: RequestBuilder<Void> 
     */
    public class func customerPrototypeDeleteAccessTokensWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/Customers/{id}/accessTokens"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Deletes all designs of this model.
     
     - parameter id: (path) Customer id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeDeleteDesigns(id id: String, completion: ((error: ErrorType?) -> Void)) {
        customerPrototypeDeleteDesignsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Deletes all designs of this model.
     - DELETE /Customers/{id}/designs
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter id: (path) Customer id 

     - returns: RequestBuilder<Void> 
     */
    public class func customerPrototypeDeleteDesignsWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/Customers/{id}/designs"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a related item by id for accessTokens.
     
     - parameter id: (path) Customer id 
     - parameter fk: (path) Foreign key for accessTokens 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeDestroyByIdAccessTokens(id id: String, fk: String, completion: ((error: ErrorType?) -> Void)) {
        customerPrototypeDestroyByIdAccessTokensWithRequestBuilder(id: id, fk: fk).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a related item by id for accessTokens.
     - DELETE /Customers/{id}/accessTokens/{fk}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter id: (path) Customer id 
     - parameter fk: (path) Foreign key for accessTokens 

     - returns: RequestBuilder<Void> 
     */
    public class func customerPrototypeDestroyByIdAccessTokensWithRequestBuilder(id id: String, fk: String) -> RequestBuilder<Void> {
        var path = "/Customers/{id}/accessTokens/{fk}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fk}", withString: "\(fk)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a related item by id for designs.
     
     - parameter id: (path) Customer id 
     - parameter fk: (path) Foreign key for designs 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeDestroyByIdDesigns(id id: String, fk: String, completion: ((error: ErrorType?) -> Void)) {
        customerPrototypeDestroyByIdDesignsWithRequestBuilder(id: id, fk: fk).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a related item by id for designs.
     - DELETE /Customers/{id}/designs/{fk}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter id: (path) Customer id 
     - parameter fk: (path) Foreign key for designs 

     - returns: RequestBuilder<Void> 
     */
    public class func customerPrototypeDestroyByIdDesignsWithRequestBuilder(id id: String, fk: String) -> RequestBuilder<Void> {
        var path = "/Customers/{id}/designs/{fk}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fk}", withString: "\(fk)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Find a related item by id for accessTokens.
     
     - parameter id: (path) Customer id 
     - parameter fk: (path) Foreign key for accessTokens 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeFindByIdAccessTokens(id id: String, fk: String, completion: ((data: TWAccessToken?, error: ErrorType?) -> Void)) {
        customerPrototypeFindByIdAccessTokensWithRequestBuilder(id: id, fk: fk).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Find a related item by id for accessTokens.
     - GET /Customers/{id}/accessTokens/{fk}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "aeiou",
  "ttl" : 1.3579000000000001069366817318950779736042022705078125,
  "userId" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) Customer id 
     - parameter fk: (path) Foreign key for accessTokens 

     - returns: RequestBuilder<TWAccessToken> 
     */
    public class func customerPrototypeFindByIdAccessTokensWithRequestBuilder(id id: String, fk: String) -> RequestBuilder<TWAccessToken> {
        var path = "/Customers/{id}/accessTokens/{fk}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fk}", withString: "\(fk)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWAccessToken>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Find a related item by id for designs.
     
     - parameter id: (path) Customer id 
     - parameter fk: (path) Foreign key for designs 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeFindByIdDesigns(id id: String, fk: String, completion: ((data: TWDesign?, error: ErrorType?) -> Void)) {
        customerPrototypeFindByIdDesignsWithRequestBuilder(id: id, fk: fk).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Find a related item by id for designs.
     - GET /Customers/{id}/designs/{fk}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "image" : "aeiou",
  "thumbnail" : "aeiou",
  "name" : "aeiou",
  "customerId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "categories" : [ "{}" ],
  "object" : "{}",
  "tags" : [ "{}" ],
  "customer" : "{}"
}}]
     
     - parameter id: (path) Customer id 
     - parameter fk: (path) Foreign key for designs 

     - returns: RequestBuilder<TWDesign> 
     */
    public class func customerPrototypeFindByIdDesignsWithRequestBuilder(id id: String, fk: String) -> RequestBuilder<TWDesign> {
        var path = "/Customers/{id}/designs/{fk}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fk}", withString: "\(fk)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWDesign>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Queries accessTokens of Customer.
     
     - parameter id: (path) Customer id 
     - parameter filter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeGetAccessTokens(id id: String, filter: String? = nil, completion: ((data: [TWAccessToken]?, error: ErrorType?) -> Void)) {
        customerPrototypeGetAccessTokensWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Queries accessTokens of Customer.
     - GET /Customers/{id}/accessTokens
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=[ {
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "aeiou",
  "ttl" : 1.3579000000000001069366817318950779736042022705078125,
  "userId" : 1.3579000000000001069366817318950779736042022705078125
} ]}]
     
     - parameter id: (path) Customer id 
     - parameter filter: (query)  (optional)

     - returns: RequestBuilder<[TWAccessToken]> 
     */
    public class func customerPrototypeGetAccessTokensWithRequestBuilder(id id: String, filter: String? = nil) -> RequestBuilder<[TWAccessToken]> {
        var path = "/Customers/{id}/accessTokens"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[TWAccessToken]>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Queries designs of Customer.
     
     - parameter id: (path) Customer id 
     - parameter filter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeGetDesigns(id id: String, filter: String? = nil, completion: ((data: [TWDesign]?, error: ErrorType?) -> Void)) {
        customerPrototypeGetDesignsWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Queries designs of Customer.
     - GET /Customers/{id}/designs
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=[ {
  "image" : "aeiou",
  "thumbnail" : "aeiou",
  "name" : "aeiou",
  "customerId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "categories" : [ "{}" ],
  "object" : "{}",
  "tags" : [ "{}" ],
  "customer" : "{}"
} ]}]
     
     - parameter id: (path) Customer id 
     - parameter filter: (query)  (optional)

     - returns: RequestBuilder<[TWDesign]> 
     */
    public class func customerPrototypeGetDesignsWithRequestBuilder(id id: String, filter: String? = nil) -> RequestBuilder<[TWDesign]> {
        var path = "/Customers/{id}/designs"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[TWDesign]>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Customer id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeUpdateAttributesPatchCustomersid(id id: String, data: TWCustomer? = nil, completion: ((data: TWCustomer?, error: ErrorType?) -> Void)) {
        customerPrototypeUpdateAttributesPatchCustomersidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch attributes for a model instance and persist it into the data source.
     - PATCH /Customers/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "firstName" : "aeiou",
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "designs" : [ "{}" ],
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) Customer id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<TWCustomer> 
     */
    public class func customerPrototypeUpdateAttributesPatchCustomersidWithRequestBuilder(id id: String, data: TWCustomer? = nil) -> RequestBuilder<TWCustomer> {
        var path = "/Customers/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWCustomer>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Customer id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeUpdateAttributesPutCustomersid(id id: String, data: TWCustomer? = nil, completion: ((data: TWCustomer?, error: ErrorType?) -> Void)) {
        customerPrototypeUpdateAttributesPutCustomersidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch attributes for a model instance and persist it into the data source.
     - PUT /Customers/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "firstName" : "aeiou",
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "designs" : [ "{}" ],
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) Customer id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<TWCustomer> 
     */
    public class func customerPrototypeUpdateAttributesPutCustomersidWithRequestBuilder(id id: String, data: TWCustomer? = nil) -> RequestBuilder<TWCustomer> {
        var path = "/Customers/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWCustomer>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a related item by id for accessTokens.
     
     - parameter id: (path) Customer id 
     - parameter fk: (path) Foreign key for accessTokens 
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeUpdateByIdAccessTokens(id id: String, fk: String, data: TWAccessToken? = nil, completion: ((data: TWAccessToken?, error: ErrorType?) -> Void)) {
        customerPrototypeUpdateByIdAccessTokensWithRequestBuilder(id: id, fk: fk, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a related item by id for accessTokens.
     - PUT /Customers/{id}/accessTokens/{fk}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "aeiou",
  "ttl" : 1.3579000000000001069366817318950779736042022705078125,
  "userId" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (path) Customer id 
     - parameter fk: (path) Foreign key for accessTokens 
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<TWAccessToken> 
     */
    public class func customerPrototypeUpdateByIdAccessTokensWithRequestBuilder(id id: String, fk: String, data: TWAccessToken? = nil) -> RequestBuilder<TWAccessToken> {
        var path = "/Customers/{id}/accessTokens/{fk}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fk}", withString: "\(fk)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWAccessToken>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a related item by id for designs.
     
     - parameter id: (path) Customer id 
     - parameter fk: (path) Foreign key for designs 
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerPrototypeUpdateByIdDesigns(id id: String, fk: String, data: TWDesign? = nil, completion: ((data: TWDesign?, error: ErrorType?) -> Void)) {
        customerPrototypeUpdateByIdDesignsWithRequestBuilder(id: id, fk: fk, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a related item by id for designs.
     - PUT /Customers/{id}/designs/{fk}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "image" : "aeiou",
  "thumbnail" : "aeiou",
  "name" : "aeiou",
  "customerId" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "categories" : [ "{}" ],
  "object" : "{}",
  "tags" : [ "{}" ],
  "customer" : "{}"
}}]
     
     - parameter id: (path) Customer id 
     - parameter fk: (path) Foreign key for designs 
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<TWDesign> 
     */
    public class func customerPrototypeUpdateByIdDesignsWithRequestBuilder(id id: String, fk: String, data: TWDesign? = nil) -> RequestBuilder<TWDesign> {
        var path = "/Customers/{id}/designs/{fk}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fk}", withString: "\(fk)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWDesign>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerReplaceById(id id: String, data: TWCustomer? = nil, completion: ((data: TWCustomer?, error: ErrorType?) -> Void)) {
        customerReplaceByIdWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Replace attributes for a model instance and persist it into the data source.
     - POST /Customers/{id}/replace
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "firstName" : "aeiou",
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "designs" : [ "{}" ],
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWCustomer> 
     */
    public class func customerReplaceByIdWithRequestBuilder(id id: String, data: TWCustomer? = nil) -> RequestBuilder<TWCustomer> {
        var path = "/Customers/{id}/replace"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWCustomer>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerReplaceOrCreate(data data: TWCustomer? = nil, completion: ((data: TWCustomer?, error: ErrorType?) -> Void)) {
        customerReplaceOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Replace an existing model instance or insert a new one into the data source.
     - POST /Customers/replaceOrCreate
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "firstName" : "aeiou",
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "designs" : [ "{}" ],
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWCustomer> 
     */
    public class func customerReplaceOrCreateWithRequestBuilder(data data: TWCustomer? = nil) -> RequestBuilder<TWCustomer> {
        let path = "/Customers/replaceOrCreate"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWCustomer>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Reset password for a user with email.
     
     - parameter options: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerResetPassword(options options: AnyObject, completion: ((error: ErrorType?) -> Void)) {
        customerResetPasswordWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Reset password for a user with email.
     - POST /Customers/reset
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter options: (body)  

     - returns: RequestBuilder<Void> 
     */
    public class func customerResetPasswordWithRequestBuilder(options options: AnyObject) -> RequestBuilder<Void> {
        let path = "/Customers/reset"
        let URLString = TweakApiAPI.basePath + path
        let parameters = options.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerUpdateAll(_where _where: String? = nil, data: TWCustomer? = nil, completion: ((data: TWInlineResponse2001?, error: ErrorType?) -> Void)) {
        customerUpdateAllWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update instances of the model matched by {{where}} from the data source.
     - POST /Customers/update
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "count" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<TWInlineResponse2001> 
     */
    public class func customerUpdateAllWithRequestBuilder(_where _where: String? = nil, data: TWCustomer? = nil) -> RequestBuilder<TWInlineResponse2001> {
        let path = "/Customers/update"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWInlineResponse2001>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerUpsertPatchCustomers(data data: TWCustomer? = nil, completion: ((data: TWCustomer?, error: ErrorType?) -> Void)) {
        customerUpsertPatchCustomersWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch an existing model instance or insert a new one into the data source.
     - PATCH /Customers
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "firstName" : "aeiou",
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "designs" : [ "{}" ],
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWCustomer> 
     */
    public class func customerUpsertPatchCustomersWithRequestBuilder(data data: TWCustomer? = nil) -> RequestBuilder<TWCustomer> {
        let path = "/Customers"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWCustomer>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerUpsertPutCustomers(data data: TWCustomer? = nil, completion: ((data: TWCustomer?, error: ErrorType?) -> Void)) {
        customerUpsertPutCustomersWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch an existing model instance or insert a new one into the data source.
     - PUT /Customers
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "firstName" : "aeiou",
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "designs" : [ "{}" ],
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<TWCustomer> 
     */
    public class func customerUpsertPutCustomersWithRequestBuilder(data data: TWCustomer? = nil) -> RequestBuilder<TWCustomer> {
        let path = "/Customers"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWCustomer>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func customerUpsertWithWhere(_where _where: String? = nil, data: TWCustomer? = nil, completion: ((data: TWCustomer?, error: ErrorType?) -> Void)) {
        customerUpsertWithWhereWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     - POST /Customers/upsertWithWhere
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "credentials" : "{}",
  "challenges" : "{}",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "firstName" : "aeiou",
  "emailVerified" : true,
  "lastUpdated" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "aeiou",
  "id" : 1.3579000000000001069366817318950779736042022705078125,
  "designs" : [ "{}" ],
  "email" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<TWCustomer> 
     */
    public class func customerUpsertWithWhereWithRequestBuilder(_where _where: String? = nil, data: TWCustomer? = nil) -> RequestBuilder<TWCustomer> {
        let path = "/Customers/upsertWithWhere"
        let URLString = TweakApiAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TWCustomer>.Type = TweakApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
